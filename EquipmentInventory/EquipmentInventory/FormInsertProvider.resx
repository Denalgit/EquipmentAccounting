<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJyclV1dXX/dXV1/3V1dVUAAAAAAAAAAAAAAAAAAAAAcnJyVXV1
        df91dXX/dXV1VQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHV1df91dXX/dXV1/3V1df91dXX/dXV1/3V1
        df91dXX/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcnJyVXV1df91dXX/dXV1VQAAAAAAAAAAAAAAAAAA
        AABycnJVdXV1/3V1df91dXVVAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXV1/3V1df91dXX/dXV1/3V1
        df91dXX/dXV1/3V1df8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABycnJVdXV1/3V1df91dXVVAAAAAAAA
        AAAAAAAAAAAAAHJyclV1dXX/dXV1/3V1dVUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB1dXX/dXV1/3V1
        df91dXX/dXV1/3V1df91dXX/dXV1/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHJyclV1dXX/dXV1/3V1
        dVUAAAAAAAAAAAAAAAAAAAAAcnJyVXV1df91dXX/dXV1VQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHV1
        df91dXX/dXV1qgAAAAAAAAAAdHR0qXV1df91dXX/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcnJyVXV1
        df91dXX/dXV1VQAAAAAAAAAAAAAAAAAAAABycnJVdXV1/3V1df91dXVVAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAdXV1/3V1df91dXWqAAAAAAAAAAB0dHSpdXV1/3V1df8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AABycnJVdXV1/3V1df91dXVVAAAAAAAAAAAAAAAAAAAAAHJyclV1dXX/dXV1/3V1dVUAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB0dHSpdHR0qXNzc3EAAAAAAAAAAHNzc3F0dHSpdHR0qQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAHJyclV1dXX/dXV1/3V1dVUAAAAAAAAAAAAAAAAAAAAAcnJyVXV1df91dXX/dXV1VQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAcnJyVXV1df91dXX/dXV1VQAAAAAAAAAAAAAAAHR0dFN1dXX0dXV1/3V1
        df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1
        df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX0dHR0UwAAAAAAAAAAdHR0nnV1
        df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1
        df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df90dHSeAAAAAAAA
        AAB0dHQjdHR0x3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1
        df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dHR0x3R0
        dCMAAAAAAAAAAAAAAAAAAAABdXV1YnR0dOp1dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1
        df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dHR06nV1
        dWIAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAeHh4EXR0dJV0dHT8dXV1/3V1df91dXX/dXV1/3V1
        df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dHR0/HNz
        c5Z4eHgRAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHV1dTJ0dHTHdXV1/3V1
        df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3R0
        dMd1dXUyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAF1dXVidHR06nV1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3R0
        dOpzc3NjAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAB4eHgRdHR0lXR0dPx1dXX/dXV1/3V1df91dXX/dXV1/3V1df91dXX/dXV1/3R0
        dPxzc3OWeHh4EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdXV1MnR0dMd1dXX/dXV1/3V1df91dXX/dXV1/3V1
        df90dHTHdXV1MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAXV1dWJ0dHTqdXV1/3V1
        df90dHTqc3NzYwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHh4
        eBF0dHSGc3Nzh3h4eBEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////8ABgAPAAYADwAGAA8ABgAPAAYADwAGAA8AxjAPAMYwDwDGMA8Pw
        D8PD8A/Dw/APw8PwD8PD8A/Dw/APw8Pxj8PD8Y/Dw/GPw8P//8OAAAABgAAAAYAAAAHAAAAD8AAAD/wA
        AD/+AAB//4AB///gB///8A////w///////8=
</value>
  </data>
</root>